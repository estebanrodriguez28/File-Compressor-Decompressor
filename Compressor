/* Program to Compress a text file
* Authors: Sean Pala & Esteban Rodriguez
* Last Updated May 11th, 2023
*/
import java.util.*;
import java.io.*;
public class Compress {
public static void main(String[] args) {
if (args.length == 0) {
System.out.println("Please provide a file name as an argument.");
return;
}
String fileName = args[0];
Scanner scanner = new Scanner(System.in);
boolean restart = true;
HashtableChain<String, Integer> hashTable = new HashtableChain<>();
int count = 0;
for (int i = 32; i <= 126; i++) {
char c = (char) i;
hashTable.put(Character.toString(c), count);
count++;
}
// put \n, \t, \r in dict
hashTable.put("\n", count);
count++;
hashTable.put("\t", count);
count++;
hashTable.put("\r", count);
count++;
while (restart) {
String encodedFile = fileName + ".zzz";
String readableFile = fileName + ".aaa";//filename for the file testing compression and confirming compression
algo is working
String logFileName = fileName + ".zzz.log";
int originalFileSize = 0;
ArrayList<String> fileStrs = new ArrayList<>();
// iterate through all lines in file, create an arraylist with all the characters, then iteratte through arraylist keep track
of the biggest possible string matching in the dictionary
//
//use get method to see if a string is in a file
//store biggest string so far,
try {
BufferedReader fileScanner = new BufferedReader(new FileReader(fileName));
String line;
ObjectOutputStream output = new ObjectOutputStream(new FileOutputStream(encodedFile));
File logFile = new File(logFileName);
logFile.createNewFile();
PrintWriter logWriter = new PrintWriter(new FileWriter(logFile));
while ((line = fileScanner.readLine()) != null) {
originalFileSize += line.length() + 1;
String s = "";
for (int i = 0; i < line.length(); i++) {
s = Character.toString(line.charAt(i));
fileStrs.add(s);

}
fileStrs.add("\n");
}
int compressedFileSize = 0;
String p = fileStrs.get(0);
String max = "";
long startTime = System.currentTimeMillis();
for (int i = 1; i < fileStrs.size(); i++) {
if (hashTable.get(p) != null) {
max = p;
p += fileStrs.get(i);
}

else {
hashTable.put(p, count);
p = p.substring(p.length()-1);
compressedFileSize += 4;
output.writeInt(hashTable.get(max));
output.writeUTF(" ");
if (i!=fileStrs.size()-1)
i--;
}
}
long endTime = System.currentTimeMillis();
long compressionTime = endTime - startTime;
double originalFileSizeKb = (double) originalFileSize / 1024;
double compressedFileSizeKb = (double) compressedFileSize / 1024;
double compressionTimeSec = (double) compressionTime / 1000;
logWriter.println("Compression of " + fileName);
logWriter.printf("Compressed from %.2f Kilobytes to %.2f Kilobytes\n", originalFileSizeKb, compressedFileSizeKb);
logWriter.printf("Compression took %.3f seconds\n", compressionTimeSec);
logWriter.println("The dictionary contains " + hashTable.size() + " total entries");
logWriter.println("The table was rehashed " + hashTable.rehashCount + " times.");
logWriter.close();
output.close();
fileScanner.close();
} catch (FileNotFoundException e) {
System.out.println("File Not Found");
}
catch (IOException e) {
System.out.println("IO Exception");
}
System.out.println("Exit program? (y for yes n for no)");
String choice = scanner.nextLine();
if (choice.equals("y")) {
restart = false;
}
else {
System.out.println("Enter a new file to be compressed: ");
fileName = scanner.nextLine();
restart = true;
}
}
scanner.close();
}
}
